# Che-Theia workflow
# matrix jobs with alpine and ubi8


dist: focal
os: linux
cache: yarn
git:
  depth: false 

language: node_js
node_js: "12"

before_install:
  - sudo apt-get update -qq && sudo apt-get install -y jq
    # Docker login
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    # Log into Quay.io
  - docker login quay.io -u="$QUAY_USERNAME " -p="$QUAY_PASSWORD"

install: skip

stages:
  - name: PR Check
    if: type = pull_request  # To be chnged later to =pr, marked != for testing purpose
  - publish
  - name: Build & Publish 'next'
    if: type = push AND branch = travis
  - name: Publish multiarch image with next tag
    if: branch = travis AND env(TAG) = "next"
  - name: Publish packages to npmjs
    if: type = push AND branch = travis
  - name: Check a Theia branch
    if: type = api

env: 
  global:
  - THEIA_GITHUB_REPO=eclipse-theia/theia
  - THEIA_BRANCH=master
  - TAG=next
  - CDN_PREFIX=https://static.developers.redhat.com/che/theia_artifacts/
  - MONACO_CDN_PREFIX=https://cdn.jsdelivr.net/npm/

jobs:
  include: 
    - stage: PR Check
      name: Linting 
      arch: amd64
      env: STEP=LINT
      install: npm install eslint@4.7.x lerna
      script: echo "Lintline step"
    - &node-build
      name: Node Build
      arch: amd64
      script: yarn
    # - <<: *node-build
    #   name: Node Build on arm64 #name is needed to be included everywhere or else yarn test is executed(default behaviour) 
    #   arch: arm64
    - <<: *node-build
      name: Node Build on ppc64le
      arch: ppc64le
    - <<: *node-build
      name: Node Build on s390x
      arch: s390x
    - &docker-build-alpine
      name: Docker Build(Alpine)
      arch: amd64
      script: 
      - echo "Alpine Docker builds"
      - bash .travis/publish_multiarch.sh ${TRAVIS_CPU_ARCH} alpine
    # - <<: *docker-build-alpine
    #   arch: arm64
    - <<: *docker-build-alpine
      arch: ppc64le
    - <<: *docker-build-alpine
      arch: s390x
    - &docker-build-ubi8
      name: Docker build(ubi8)
      arch: amd64
      script: 
      - echo "ubi8 job runs here"
      - bash .travis/publish_multiarch.sh ${TRAVIS_CPU_ARCH} ubi8
    # - <<: *docker-build-ubi8
    #   arch: arm64
    - <<: *docker-build-ubi8
      arch: ppc64le
    - <<: *docker-build-ubi8
      arch: s390x

    - &build-and-push-next
      stage: Build & Publish 'next'
      arch: amd64
      script: 
      - docker image prune -a -f
      - ./build.sh ${TRAVIS_CPU_ARCH} --root-yarn-opts:--ignore-scripts --dockerfile:Dockerfile.alpine --push 
      #- printf "//registry.npmjs.org/:_authToken=${{ secrets.CHE_NPM_AUTH_TOKEN }}\n" >> ~/.npmrc
      #- yarn publish:next
    # - <<: *build-and-push-next
    #   arch: arm64
    - <<: *build-and-push-next
      arch: ppc64le
    - <<: *build-and-push-next
      arch: s390x
    - stage: Publish multiarch image with next tag
      if: type = push AND branch = travis
      name: Publish multiarch image with next tag
      script: bash .travis/publish_multiarch.sh $TAG
    - stage: Publish packages to npmjs
      name: Publish packages to npmjs
      script: 
      - printf "//registry.npmjs.org/:_authToken=${CHE_NPM_AUTH_TOKEN}\n" >> ~/.npmrc
      - yarn publish:next

    - &check-a-theia-branch
      stage: Check a Theia branch
      arch: amd64
      language: node_js
      node_js: "12"
      before_install: npm i -g lerna
      script:
      - docker image prune -a -f
      - docker pull quay.io/prabhav/che-theia-dev:next
      - docker tag quay.io/prabhav/che-theia-dev:next prabhav/che-theia-dev:next
      - ./build.sh ${TRAVIS_CPU_ARCH} --root-yarn-opts:--ignore-scripts --dockerfile:Dockerfile.alpine --build-args:THEIA_GITHUB_REPO=${THEIA_GITHUB_REPO} --branch:${THEIA_BRANCH}
    # - <<: *check-a-theia-branch
    #   arch: arm64
    - <<: *check-a-theia-branch
      arch: ppc64le
    - <<: *check-a-theia-branch
      arch: s390x