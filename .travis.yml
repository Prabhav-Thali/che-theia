# Che-Theia workflow
# matrix jobs with alpine and ubi8

dist: focal
os: linux
cache: yarn
git:
  depth: false 

language: node_js
node_js: "12"

before_install:
  - sudo apt-get update -qq && sudo apt-get install -y jq
    # Docker login
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    # Log into Quay.io
  - docker login quay.io -u="$QUAY_USERNAME " -p="$QUAY_PASSWORD"

install: skip

stages:
  - name: PR Check
    if: type = pull_request  # To be chnged later to =pr, marked != for testing purpose
  - publish
  - name: Build & Publish 'next'
    if: type = push AND branch = travis
  - Check a Theia branch
  - Release

env: 
  global:
  - THEIA_GITHUB_REPO=eclipse-theia/theia
  - THEIA_BRANCH=master
  - TAG=next
  - CDN_PREFIX=https://static.developers.redhat.com/che/theia_artifacts/
  - MONACO_CDN_PREFIX=https://cdn.jsdelivr.net/npm/

jobs:
  include: 
    - stage: PR Check
      name: Linting 
      arch: amd64
      env: STEP=LINT
      install: npm install eslint@4.7.x lerna
      script: echo "Lintline step"
    - &node-build
      name: Node Build
      arch: amd64
      script: yarn
    # - <<: *node-build
    #   name: Node Build on arm64 #name is needed to be included everywhere or else yarn test is executed(default behaviour) 
    #   arch: arm64
    - <<: *node-build
      name: Node Build on ppc64le
      arch: ppc64le
    - <<: *node-build
      name: Node Build on s390x
      arch: s390x
    - &docker-build-alpine
      name: Docker Build(Alpine)
      arch: amd64
      script: 
      - echo "Alpine Docker builds"
      - bash .travis/publish_multiarch.sh ${TRAVIS_CPU_ARCH} alpine
    # - <<: *docker-build-alpine
    #   arch: arm64
    - <<: *docker-build-alpine
      arch: ppc64le
    - <<: *docker-build-alpine
      arch: s390x
    - &docker-build-ubi8
      name: Docker build(ubi8)
      arch: amd64
      script: 
      - echo "ubi8 job runs here"
      - bash .travis/publish_multiarch.sh ${TRAVIS_CPU_ARCH} ubi8
    # - <<: *docker-build-ubi8
    #   arch: arm64
    - <<: *docker-build-ubi8
      arch: ppc64le
    - <<: *docker-build-ubi8
      arch: s390x

    - &build-and-push-next
      stage: Build & Publish 'next'
      arch: amd64
      script: 
      - docker image prune -a -f
      - ./build.sh ${TRAVIS_CPU_ARCH} --root-yarn-opts:--ignore-scripts --dockerfile:Dockerfile.alpine --push 
      #- printf "//registry.npmjs.org/:_authToken=${{ secrets.CHE_NPM_AUTH_TOKEN }}\n" >> ~/.npmrc
      #- yarn publish:next
    # - <<: *build-and-push-next
    #   arch: arm64
    - <<: *build-and-push-next
      arch: ppc64le
    - <<: *build-and-push-next
      arch: s390x
    - name: Publish multiarch image with next tag
      script: bash .travis/publish_multiarch.sh $TAG
    - stage: Check a Theia branch
      if: type = api
      arch: amd64
      os: linux
      language: node_js
      node_js: "12"
      script:
      - docker image prune -a -f
      - docker pull quay.io/prabhav/che-theia-dev:next
      - docker tag quay.io/prabhav/che-theia-dev:next prabhav/che-theia-dev:next
      - ./build.sh --root-yarn-opts:--ignore-scripts --dockerfile:Dockerfile.alpine --build-args:THEIA_GITHUB_REPO=${THEIA_GITHUB_REPO} --branch:${THEIA_BRANCH}
    - name: Check a Theia branch
      if: type = api
      arch: s390x
      os: linux
      language: node_js
      node_js: "12"
      script:
      - docker image prune -a -f
      - docker pull quay.io/prabhav/che-theia-dev:next
      - docker tag quay.io/prabhav/che-theia-dev:next prabhav/che-theia-dev:next
      - ./build.sh --root-yarn-opts:--ignore-scripts --dockerfile:Dockerfile.alpine --build-args:THEIA_GITHUB_REPO=${THEIA_GITHUB_REPO} --branch:${THEIA_BRANCH}
    - stage: Release
      name: Check existing tags
      if: type = api AND branch = master
      arch: amd64
      os: linux
      language: node_js
      node_js: "12"
      script:
      - |  
        set +e
        RECREATE_TAGS=${{ github.event.inputs.forceRecreateTags }}
        VERSION=${{ github.event.inputs.version }}
        EXISTING_TAG=$(git ls-remote --exit-code origin refs/tags/${VERSION})
        if [[ -n ${EXISTING_TAG} ]]; then
          if [[ ${RECREATE_TAGS} == "true" ]]; then
            echo "[INFO] Removing tag for ${VERSION} version. New tag will be recreated during release."
            git push origin :$VERSION
          else
            echo "[ERROR] Cannot proceed with release - tag ${EXISTING_TAG} already exists."
            exit 1
          fi
        else
          echo "[INFO] No existing tags detected for $VERSION"
        fi
    - name: Prepare release
      if: type = api AND branch = master
      arch: amd64
      os: linux
      script:
      - |  
        git config --global user.name "Mykhailo Kuznietsov"
        git config --global user.email "mkuznets@redhat.com"
        export GITHUB_TOKEN=${{ secrets.CHE_BOT_GITHUB_TOKEN }}
        export AKAMAI_CHE_AUTH=${{ secrets.AKAMAI_CHE_AUTH }}
        ./make-release.sh --version ${{ github.event.inputs.version }}
    - name: Build and publish images
      if: type = api AND branch = master
      arch: amd64
      os: linux
      env:
        CDN_PREFIX=https://static.developers.redhat.com/che/theia_artifacts/
        MONACO_CDN_PREFIX=https://cdn.jsdelivr.net/npm/
      script:
      - docker image prune -a -f
      - ./build.sh --root-yarn-opts:--ignore-scripts --dockerfile:Dockerfile.alpine --push 
    - name: Set-up npmjs auth token
      if: github.event.inputs.pushToNpmJs == true 
      run: printf "//registry.npmjs.org/:_authToken=${{ secrets.CHE_NPM_AUTH_TOKEN }}\n" >> ~/.npmrc
    - name: Publish packages to npmjs
      if: github.event.inputs.pushToNpmJs == true 
      run: yarn publish:next

      before_deploy:
        - printf "//registry.npmjs.org/:_authToken=${{ secrets.CHE_NPM_AUTH_TOKEN }}\n" >> ~/.npmrc
      deploy:
        provider: script
        skip_cleanup: true
        script: "yarn publish:next"
        on:
          tags: true
    - stage: deploy
      if: "(branch = master) AND (NOT (type IN (pull_request)))"
      before_install:
        - curl -o- -L https://yarnpkg.com/install.sh | bash
        - export PATH="$HOME/.yarn/bin:$PATH"



  # Upload code coverage results to codecov.io, see https://github.com/codecov/codecov-bash for more information
  #- bash <(curl -s https://codecov.io/bash) 
